=== modified file 'gtk/gtkscrolledwindow.c'
--- gtk/gtkscrolledwindow.c	2010-05-18 12:35:39 +0000
+++ gtk/gtkscrolledwindow.c	2011-03-01 15:13:13 +0000
@@ -144,6 +144,9 @@
 
 static guint signals[LAST_SIGNAL] = {0};
 
+static GtkWidget* (*os_scrollbar_new) (GtkOrientation, GtkAdjustment*) = NULL;
+static gboolean use_overlay_scrollbar = FALSE;
+
 G_DEFINE_TYPE (GtkScrolledWindow, gtk_scrolled_window, GTK_TYPE_BIN)
 
 static void
@@ -394,8 +397,42 @@
 gtk_scrolled_window_new (GtkAdjustment *hadjustment,
 			 GtkAdjustment *vadjustment)
 {
+  static gboolean init_once = FALSE;
   GtkWidget *scrolled_window;
 
+  if (G_UNLIKELY (init_once == FALSE))
+    {
+      if (g_getenv ("LIBOVERLAY_SCROLLBAR") != NULL)
+        {
+          GModule *module = NULL;
+          gpointer symbol = NULL;
+          gchar *custom_path;
+
+          custom_path= (gchar*) g_getenv ("LIBOVERLAY_SCROLLBAR_PATH");
+          if (custom_path == NULL)
+            custom_path = "/usr/lib/liboverlay-scrollbar-0.0.so";
+
+          module = g_module_open (custom_path, G_MODULE_BIND_LOCAL);
+          if (module != NULL)
+            {
+              if (g_module_symbol (module, "os_utils_is_blacklisted", &symbol))
+                {
+                  gboolean (*os_utils_is_blacklisted) (const gchar*) = symbol;
+                  if (os_utils_is_blacklisted (g_get_prgname ()) == FALSE)
+                    {
+                      if (g_module_symbol (module, "os_scrollbar_new", &symbol))
+                        {
+                          os_scrollbar_new = symbol;
+                          use_overlay_scrollbar = TRUE;
+                        }
+                    }
+                }
+            }
+        }
+
+      init_once = TRUE;
+    }
+
   if (hadjustment)
     g_return_val_if_fail (GTK_IS_ADJUSTMENT (hadjustment), NULL);
 
@@ -434,7 +471,12 @@
   if (!scrolled_window->hscrollbar)
     {
       gtk_widget_push_composite_child ();
-      scrolled_window->hscrollbar = gtk_hscrollbar_new (hadjustment);
+
+      if (use_overlay_scrollbar == FALSE)
+        scrolled_window->hscrollbar = gtk_hscrollbar_new (hadjustment);
+      else
+        scrolled_window->hscrollbar = os_scrollbar_new (GTK_ORIENTATION_HORIZONTAL, hadjustment);
+
       gtk_widget_set_composite_name (scrolled_window->hscrollbar, "hscrollbar");
       gtk_widget_pop_composite_child ();
 
@@ -495,7 +537,12 @@
   if (!scrolled_window->vscrollbar)
     {
       gtk_widget_push_composite_child ();
-      scrolled_window->vscrollbar = gtk_vscrollbar_new (vadjustment);
+
+      if (use_overlay_scrollbar == FALSE)
+        scrolled_window->vscrollbar = gtk_vscrollbar_new (vadjustment);
+      else
+        scrolled_window->vscrollbar = os_scrollbar_new (GTK_ORIENTATION_VERTICAL, vadjustment);
+
       gtk_widget_set_composite_name (scrolled_window->vscrollbar, "vscrollbar");
       gtk_widget_pop_composite_child ();
 
@@ -1366,7 +1413,10 @@
 	    priv->real_window_placement == GTK_CORNER_BOTTOM_LEFT)))
 	allocation->x += (vscrollbar_requisition.width +  scrollbar_spacing);
 
-      allocation->width = MAX (1, allocation->width - (vscrollbar_requisition.width + scrollbar_spacing));
+      if (use_overlay_scrollbar == FALSE)
+        allocation->width = MAX (1, allocation->width - (vscrollbar_requisition.width + scrollbar_spacing));
+      else
+        allocation->width = MAX (1, widget->allocation.width);
     }
   if (scrolled_window->hscrollbar_visible)
     {
@@ -1378,7 +1428,10 @@
 	  priv->real_window_placement == GTK_CORNER_BOTTOM_RIGHT)
 	allocation->y += (hscrollbar_requisition.height + scrollbar_spacing);
 
-      allocation->height = MAX (1, allocation->height - (hscrollbar_requisition.height + scrollbar_spacing));
+      if (use_overlay_scrollbar == FALSE)
+        allocation->height = MAX (1, allocation->height - (hscrollbar_requisition.height + scrollbar_spacing));
+      else
+        allocation->height = MAX (1, widget->allocation.height);
     }
 }
 

