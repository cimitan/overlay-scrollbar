=== modified file 'gtk/gtkmain.c'
--- old/gtk/gtkmain.c	2010-08-18 17:15:22 +0000
+++ new/gtk/gtkmain.c	2011-03-01 17:17:23 +0000
@@ -740,6 +740,7 @@
 
   _gtk_accel_map_init ();
   _gtk_rc_init ();
+  _gtk_scrolled_window_init ();
 
   /* Set the 'initialized' flag.
    */

=== modified file 'gtk/gtkscrolledwindow.c'
--- old/gtk/gtkscrolledwindow.c	2010-05-18 12:35:39 +0000
+++ new/gtk/gtkscrolledwindow.c	2011-03-03 10:50:14 +0000
@@ -144,6 +144,9 @@
 
 static guint signals[LAST_SIGNAL] = {0};
 
+static GtkWidget* (*os_scrollbar_new) (GtkOrientation, GtkAdjustment*) = NULL;
+static gboolean use_overlay_scrollbar = FALSE;
+
 G_DEFINE_TYPE (GtkScrolledWindow, gtk_scrolled_window, GTK_TYPE_BIN)
 
 static void
@@ -434,7 +437,12 @@
   if (!scrolled_window->hscrollbar)
     {
       gtk_widget_push_composite_child ();
-      scrolled_window->hscrollbar = gtk_hscrollbar_new (hadjustment);
+
+      if (use_overlay_scrollbar == FALSE)
+        scrolled_window->hscrollbar = gtk_hscrollbar_new (hadjustment);
+      else
+        scrolled_window->hscrollbar = os_scrollbar_new (GTK_ORIENTATION_HORIZONTAL, hadjustment);
+
       gtk_widget_set_composite_name (scrolled_window->hscrollbar, "hscrollbar");
       gtk_widget_pop_composite_child ();
 
@@ -495,7 +503,12 @@
   if (!scrolled_window->vscrollbar)
     {
       gtk_widget_push_composite_child ();
-      scrolled_window->vscrollbar = gtk_vscrollbar_new (vadjustment);
+
+      if (use_overlay_scrollbar == FALSE)
+        scrolled_window->vscrollbar = gtk_vscrollbar_new (vadjustment);
+      else
+        scrolled_window->vscrollbar = os_scrollbar_new (GTK_ORIENTATION_VERTICAL, vadjustment);
+
       gtk_widget_set_composite_name (scrolled_window->vscrollbar, "vscrollbar");
       gtk_widget_pop_composite_child ();
 
@@ -1366,7 +1379,10 @@
 	    priv->real_window_placement == GTK_CORNER_BOTTOM_LEFT)))
 	allocation->x += (vscrollbar_requisition.width +  scrollbar_spacing);
 
-      allocation->width = MAX (1, allocation->width - (vscrollbar_requisition.width + scrollbar_spacing));
+      if (use_overlay_scrollbar == FALSE)
+        allocation->width = MAX (1, allocation->width - (vscrollbar_requisition.width + scrollbar_spacing));
+      else
+        allocation->width = MAX (1, allocation->width);
     }
   if (scrolled_window->hscrollbar_visible)
     {
@@ -1378,7 +1394,10 @@
 	  priv->real_window_placement == GTK_CORNER_BOTTOM_RIGHT)
 	allocation->y += (hscrollbar_requisition.height + scrollbar_spacing);
 
-      allocation->height = MAX (1, allocation->height - (hscrollbar_requisition.height + scrollbar_spacing));
+      if (use_overlay_scrollbar == FALSE)
+        allocation->height = MAX (1, allocation->height - (hscrollbar_requisition.height + scrollbar_spacing));
+      else
+        allocation->height = MAX (1, allocation->height);
     }
 }
 
@@ -1764,6 +1783,59 @@
 }
 
 /*
+ * _gtk_scrolled_window_init:
+ *
+ * Initialize local use of the overlay-scrollbar library.
+ *
+ * In order to be activated for an application, the LIBOVERLAY_SCROLLBAR
+ * environment variable must be set and the liboverlay-scrollbar shared library
+ * must be installed. If it's installed locally, a custom path to
+ * liboverlay-scrollbar can be set using the LIBOVERLAY_SCROLLBAR_PATH
+ * environment variable. liboverlay-scrollbar is loaded at run-time so that it
+ * can be installed separately.
+ *
+ * NOTE: This is a beta feature meant for demonstration and early adopters only.
+ */
+void
+_gtk_scrolled_window_init (void)
+{
+  static gboolean init_once = FALSE;
+
+  if (init_once == FALSE)
+    {
+      if (g_getenv ("LIBOVERLAY_SCROLLBAR") != NULL)
+        {
+          GModule *module = NULL;
+          gpointer symbol = NULL;
+          gchar *path;
+
+          path = (gchar*) g_getenv ("LIBOVERLAY_SCROLLBAR_PATH");
+          if (path == NULL)
+            path = "/usr/lib/liboverlay-scrollbar-0.1.so";
+
+          module = g_module_open (path, G_MODULE_BIND_LOCAL);
+          if (module != NULL)
+            {
+              if (g_module_symbol (module, "os_utils_is_blacklisted", &symbol))
+                {
+                  gboolean (*os_utils_is_blacklisted) (const gchar*) = symbol;
+                  if (os_utils_is_blacklisted (g_get_prgname ()) == FALSE)
+                    {
+                      if (g_module_symbol (module, "os_scrollbar_new", &symbol))
+                        {
+                          os_scrollbar_new = symbol;
+                          use_overlay_scrollbar = TRUE;
+                        }
+                    }
+                }
+            }
+        }
+
+      init_once = TRUE;
+    }
+}
+
+/*
  * _gtk_scrolled_window_get_spacing:
  * @scrolled_window: a scrolled window
  * 

=== modified file 'gtk/gtkscrolledwindow.h'
--- old/gtk/gtkscrolledwindow.h	2009-09-05 07:16:24 +0000
+++ new/gtk/gtkscrolledwindow.h	2011-03-01 17:18:02 +0000
@@ -127,6 +127,7 @@
 void	       gtk_scrolled_window_add_with_viewport (GtkScrolledWindow *scrolled_window,
 						      GtkWidget		*child);
 
+void _gtk_scrolled_window_init                  (void);
 gint _gtk_scrolled_window_get_scrollbar_spacing (GtkScrolledWindow *scrolled_window);
 
 

