--- gtk+-2.24.1-orig/gtk/gtkscrolledwindow.c	2011-02-19 15:31:37.000000000 +0100
+++ gtk+-2.24.1/gtk/gtkscrolledwindow.c	2011-02-24 10:16:32.312425003 +0100
@@ -73,6 +73,71 @@
 
 #define DEFAULT_SCROLLBAR_SPACING  3
 
+typedef GType	       (*GtkScrolledWindowGetTypeFunc)             (void);
+typedef GtkWidget*     (*GtkScrolledWindowNewFunc)                 (GtkAdjustment*, GtkAdjustment*);
+typedef void	       (*GtkScrolledWindowSetHAdjustmentFunc)      (GtkScrolledWindow*, GtkAdjustment*);
+typedef void	       (*GtkScrolledWindowSetVAdjustmentFunc)      (GtkScrolledWindow*, GtkAdjustment*);
+typedef GtkAdjustment* (*GtkScrolledWindowGetHAdjustmentFunc)      (GtkScrolledWindow*);
+typedef GtkAdjustment* (*GtkScrolledWindowGetVAdjustmentFunc)      (GtkScrolledWindow*);
+typedef GtkWidget*     (*GtkScrolledWindowGetHScrollbarFunc)       (GtkScrolledWindow*);
+typedef GtkWidget*     (*GtkScrolledWindowGetVScrollbarFunc)       (GtkScrolledWindow*);
+typedef void	       (*GtkScrolledWindowSetPolicyFunc)           (GtkScrolledWindow*, GtkPolicyType, GtkPolicyType);
+typedef void	       (*GtkScrolledWindowGetPolicyFunc)           (GtkScrolledWindow*, GtkPolicyType*, GtkPolicyType*);
+typedef void	       (*GtkScrolledWindowSetPlacementFunc)        (GtkScrolledWindow*, GtkCornerType);
+typedef void	       (*GtkScrolledWindowUnsetPlacementFunc)      (GtkScrolledWindow*);
+typedef GtkCornerType  (*GtkScrolledWindowGetPlacementFunc)        (GtkScrolledWindow*);
+typedef void	       (*GtkScrolledWindowSetShadowTypeFunc)       (GtkScrolledWindow*, GtkShadowType);
+typedef GtkShadowType  (*GtkScrolledWindowGetShadowTypeFunc)       (GtkScrolledWindow*);
+typedef void	       (*GtkScrolledWindowAddWithViewportFunc)     (GtkScrolledWindow*, GtkWidget*);
+typedef gint	       (*GtkScrolledWindowGetScrollbarSpacingFunc) (GtkScrolledWindow*);
+
+static GType          gtk_scrolled_window_get_type_          (void) G_GNUC_CONST;
+static GtkWidget*     gtk_scrolled_window_new_               (GtkAdjustment     *hadjustment,
+						       GtkAdjustment     *vadjustment);
+static void           gtk_scrolled_window_set_hadjustment_   (GtkScrolledWindow *scrolled_window,
+						       GtkAdjustment     *hadjustment);
+static void           gtk_scrolled_window_set_vadjustment_   (GtkScrolledWindow *scrolled_window,
+						       GtkAdjustment     *vadjustment);
+static GtkAdjustment* gtk_scrolled_window_get_hadjustment_   (GtkScrolledWindow *scrolled_window);
+static GtkAdjustment* gtk_scrolled_window_get_vadjustment_   (GtkScrolledWindow *scrolled_window);
+static GtkWidget*     gtk_scrolled_window_get_hscrollbar_    (GtkScrolledWindow *scrolled_window);
+static GtkWidget*     gtk_scrolled_window_get_vscrollbar_    (GtkScrolledWindow *scrolled_window);
+static void           gtk_scrolled_window_set_policy_        (GtkScrolledWindow *scrolled_window,
+						       GtkPolicyType      hscrollbar_policy,
+						       GtkPolicyType      vscrollbar_policy);
+static void           gtk_scrolled_window_get_policy_        (GtkScrolledWindow *scrolled_window,
+						       GtkPolicyType     *hscrollbar_policy,
+						       GtkPolicyType     *vscrollbar_policy);
+static void           gtk_scrolled_window_set_placement_     (GtkScrolledWindow *scrolled_window,
+						       GtkCornerType      window_placement);
+static void           gtk_scrolled_window_unset_placement_   (GtkScrolledWindow *scrolled_window);
+
+static GtkCornerType  gtk_scrolled_window_get_placement_     (GtkScrolledWindow *scrolled_window);
+static void           gtk_scrolled_window_set_shadow_type_   (GtkScrolledWindow *scrolled_window,
+						       GtkShadowType      type);
+static GtkShadowType  gtk_scrolled_window_get_shadow_type_   (GtkScrolledWindow *scrolled_window);
+static void	       gtk_scrolled_window_add_with_viewport_ (GtkScrolledWindow *scrolled_window,
+						       GtkWidget		*child);
+static gint      _gtk_scrolled_window_get_scrollbar_spacing_ (GtkScrolledWindow *scrolled_window);
+
+static GtkScrolledWindowGetTypeFunc gtk_scrolled_window_get_type_impl = NULL;
+static GtkScrolledWindowNewFunc gtk_scrolled_window_new_impl = NULL;
+static GtkScrolledWindowSetHAdjustmentFunc gtk_scrolled_window_set_hadjustment_impl = NULL;
+static GtkScrolledWindowSetVAdjustmentFunc gtk_scrolled_window_set_vadjustment_impl = NULL;
+static GtkScrolledWindowGetHAdjustmentFunc gtk_scrolled_window_get_hadjustment_impl = NULL;
+static GtkScrolledWindowGetVAdjustmentFunc gtk_scrolled_window_get_vadjustment_impl = NULL;
+static GtkScrolledWindowGetHScrollbarFunc gtk_scrolled_window_get_hscrollbar_impl = NULL;
+static GtkScrolledWindowGetVScrollbarFunc gtk_scrolled_window_get_vscrollbar_impl = NULL;
+static GtkScrolledWindowSetPolicyFunc gtk_scrolled_window_set_policy_impl = NULL;
+static GtkScrolledWindowGetPolicyFunc gtk_scrolled_window_get_policy_impl = NULL;
+static GtkScrolledWindowSetPlacementFunc gtk_scrolled_window_set_placement_impl = NULL;
+static GtkScrolledWindowUnsetPlacementFunc gtk_scrolled_window_unset_placement_impl = NULL;
+static GtkScrolledWindowGetPlacementFunc gtk_scrolled_window_get_placement_impl = NULL;
+static GtkScrolledWindowSetShadowTypeFunc gtk_scrolled_window_set_shadow_type_impl = NULL;
+static GtkScrolledWindowGetShadowTypeFunc gtk_scrolled_window_get_shadow_type_impl = NULL;
+static GtkScrolledWindowAddWithViewportFunc gtk_scrolled_window_add_with_viewport_impl = NULL;
+static GtkScrolledWindowGetScrollbarSpacingFunc _gtk_scrolled_window_get_scrollbar_spacing_impl = NULL;
+
 typedef struct {
 	gboolean window_placement_set;
 	GtkCornerType real_window_placement;
@@ -142,9 +207,45 @@
 
 static void  gtk_scrolled_window_update_real_placement (GtkScrolledWindow *scrolled_window);
 
+static void     gtk_scrolled_window_init               (GtkScrolledWindow *self);
+static void     gtk_scrolled_window_class_init         (GtkScrolledWindowClass *klass);
+
+static gpointer gtk_scrolled_window_parent_class = NULL;
 static guint signals[LAST_SIGNAL] = {0};
 
-G_DEFINE_TYPE (GtkScrolledWindow, gtk_scrolled_window, GTK_TYPE_BIN)
+static void
+gtk_scrolled_window_class_intern_init (gpointer klass)
+{
+  gtk_scrolled_window_parent_class = g_type_class_peek_parent (klass);
+  gtk_scrolled_window_class_init ((GtkScrolledWindowClass*) klass);
+}
+
+static GType
+gtk_scrolled_window_get_type_ (void)
+{
+  static volatile gsize g_define_type_id__volatile = 0;
+
+  if (g_once_init_enter (&g_define_type_id__volatile))
+    {
+      GType g_define_type_id =
+        g_type_register_static_simple (GTK_TYPE_BIN,
+                                       g_intern_static_string ("GtkScrolledWindow"),
+                                       sizeof (GtkScrolledWindowClass),
+                                       (GClassInitFunc) gtk_scrolled_window_class_intern_init,
+                                       sizeof (GtkScrolledWindow),
+                                       (GInstanceInitFunc) gtk_scrolled_window_init,
+                                       (GTypeFlags) 0);
+      g_once_init_leave (&g_define_type_id__volatile, g_define_type_id);
+    }
+
+  return g_define_type_id__volatile;
+}
+
+GType
+gtk_scrolled_window_get_type (void)
+{
+  return gtk_scrolled_window_get_type_impl ();
+}
 
 static void
 add_scroll_binding (GtkBindingSet  *binding_set,
@@ -376,6 +477,26 @@
   gtk_scrolled_window_update_real_placement (scrolled_window);
 }
 
+static GtkWidget*
+gtk_scrolled_window_new_ (GtkAdjustment *hadjustment,
+                          GtkAdjustment *vadjustment)
+{
+  GtkWidget *scrolled_window;
+
+  if (hadjustment)
+    g_return_val_if_fail (GTK_IS_ADJUSTMENT (hadjustment), NULL);
+
+  if (vadjustment)
+    g_return_val_if_fail (GTK_IS_ADJUSTMENT (vadjustment), NULL);
+
+  scrolled_window = g_object_new (GTK_TYPE_SCROLLED_WINDOW,
+				    "hadjustment", hadjustment,
+				    "vadjustment", vadjustment,
+				    NULL);
+
+  return scrolled_window;
+}
+
 /**
  * gtk_scrolled_window_new:
  * @hadjustment: (allow-none): horizontal adjustment
@@ -394,32 +515,69 @@
 gtk_scrolled_window_new (GtkAdjustment *hadjustment,
 			 GtkAdjustment *vadjustment)
 {
-  GtkWidget *scrolled_window;
-
-  if (hadjustment)
-    g_return_val_if_fail (GTK_IS_ADJUSTMENT (hadjustment), NULL);
-
-  if (vadjustment)
-    g_return_val_if_fail (GTK_IS_ADJUSTMENT (vadjustment), NULL);
-
-  scrolled_window = g_object_new (GTK_TYPE_SCROLLED_WINDOW,
-				    "hadjustment", hadjustment,
-				    "vadjustment", vadjustment,
-				    NULL);
+  static gboolean module_loaded_once = FALSE;
+  if (module_loaded_once == FALSE)
+  {
+    GModule *module = NULL;
+    gpointer symbol = NULL;
+    gchar *custom_path = (gchar*) g_getenv ("SCROLLBAR_OVERLAY_PATH");
+    if (custom_path == NULL)
+      custom_path = "/usr/lib/liboverlay-scrollbar.so";
+    module = g_module_open (custom_path, G_MODULE_BIND_LOCAL);
+    if (module != NULL)
+      g_module_symbol (module, "tweaked_scrolled_window", &symbol);
+    module_loaded_once = TRUE;
+
+    if (symbol != NULL)
+    {
+      fprintf (stdout, "using scrolled window implementation from module\n");
+      gtk_scrolled_window_get_type_impl = ((gpointer*) symbol)[0];
+      gtk_scrolled_window_new_impl = ((gpointer*) symbol)[1];
+      gtk_scrolled_window_set_hadjustment_impl = ((gpointer*) symbol)[2];
+      gtk_scrolled_window_set_vadjustment_impl = ((gpointer*) symbol)[3];
+      gtk_scrolled_window_get_hadjustment_impl = ((gpointer*) symbol)[4];
+      gtk_scrolled_window_get_vadjustment_impl = ((gpointer*) symbol)[5];
+      gtk_scrolled_window_get_hscrollbar_impl = ((gpointer*) symbol)[6];
+      gtk_scrolled_window_get_vscrollbar_impl = ((gpointer*) symbol)[7];
+      gtk_scrolled_window_set_policy_impl = ((gpointer*) symbol)[8];
+      gtk_scrolled_window_get_policy_impl = ((gpointer*) symbol)[9];
+      gtk_scrolled_window_set_placement_impl = ((gpointer*) symbol)[10];
+      gtk_scrolled_window_unset_placement_impl = ((gpointer*) symbol)[11];
+      gtk_scrolled_window_get_placement_impl = ((gpointer*) symbol)[12];
+      gtk_scrolled_window_set_shadow_type_impl = ((gpointer*) symbol)[13];
+      gtk_scrolled_window_get_shadow_type_impl = ((gpointer*) symbol)[14];
+      gtk_scrolled_window_add_with_viewport_impl = ((gpointer*) symbol)[15];
+      _gtk_scrolled_window_get_scrollbar_spacing_impl = ((gpointer*) symbol)[16];
+    }
+    else
+    {
+      fprintf (stdout, "using standard scrolled window implementation\n");
+      gtk_scrolled_window_get_type_impl = gtk_scrolled_window_get_type_;
+      gtk_scrolled_window_new_impl = gtk_scrolled_window_new_;
+      gtk_scrolled_window_set_hadjustment_impl = gtk_scrolled_window_set_hadjustment_;
+      gtk_scrolled_window_set_vadjustment_impl = gtk_scrolled_window_set_vadjustment_;
+      gtk_scrolled_window_get_hadjustment_impl = gtk_scrolled_window_get_hadjustment_;
+      gtk_scrolled_window_get_vadjustment_impl = gtk_scrolled_window_get_vadjustment_;
+      gtk_scrolled_window_get_hscrollbar_impl = gtk_scrolled_window_get_hscrollbar_;
+      gtk_scrolled_window_get_vscrollbar_impl = gtk_scrolled_window_get_vscrollbar_;
+      gtk_scrolled_window_set_policy_impl = gtk_scrolled_window_set_policy_;
+      gtk_scrolled_window_get_policy_impl = gtk_scrolled_window_get_policy_;
+      gtk_scrolled_window_set_placement_impl = gtk_scrolled_window_set_placement_;
+      gtk_scrolled_window_unset_placement_impl = gtk_scrolled_window_unset_placement_;
+      gtk_scrolled_window_get_placement_impl = gtk_scrolled_window_get_placement_;
+      gtk_scrolled_window_set_shadow_type_impl = gtk_scrolled_window_set_shadow_type_;
+      gtk_scrolled_window_get_shadow_type_impl = gtk_scrolled_window_get_shadow_type_;
+      gtk_scrolled_window_add_with_viewport_impl = gtk_scrolled_window_add_with_viewport_;
+      _gtk_scrolled_window_get_scrollbar_spacing_impl = _gtk_scrolled_window_get_scrollbar_spacing_;
+    }
+  }
 
-  return scrolled_window;
+  return gtk_scrolled_window_new_impl (hadjustment, vadjustment);
 }
 
-/**
- * gtk_scrolled_window_set_hadjustment:
- * @scrolled_window: a #GtkScrolledWindow
- * @hadjustment: horizontal scroll adjustment
- *
- * Sets the #GtkAdjustment for the horizontal scrollbar.
- */
-void
-gtk_scrolled_window_set_hadjustment (GtkScrolledWindow *scrolled_window,
-				     GtkAdjustment     *hadjustment)
+static void
+gtk_scrolled_window_set_hadjustment_ (GtkScrolledWindow *scrolled_window,
+                                      GtkAdjustment     *hadjustment)
 {
   GtkBin *bin;
 
@@ -472,15 +630,22 @@
 }
 
 /**
- * gtk_scrolled_window_set_vadjustment:
+ * gtk_scrolled_window_set_hadjustment:
  * @scrolled_window: a #GtkScrolledWindow
- * @vadjustment: vertical scroll adjustment
+ * @hadjustment: horizontal scroll adjustment
  *
- * Sets the #GtkAdjustment for the vertical scrollbar.
+ * Sets the #GtkAdjustment for the horizontal scrollbar.
  */
 void
-gtk_scrolled_window_set_vadjustment (GtkScrolledWindow *scrolled_window,
-				     GtkAdjustment     *vadjustment)
+gtk_scrolled_window_set_hadjustment (GtkScrolledWindow *scrolled_window,
+				     GtkAdjustment     *hadjustment)
+{
+  gtk_scrolled_window_set_hadjustment_impl (scrolled_window, hadjustment);
+}
+
+static void
+gtk_scrolled_window_set_vadjustment_ (GtkScrolledWindow *scrolled_window,
+                                      GtkAdjustment     *vadjustment)
 {
   GtkBin *bin;
 
@@ -533,6 +698,30 @@
 }
 
 /**
+ * gtk_scrolled_window_set_vadjustment:
+ * @scrolled_window: a #GtkScrolledWindow
+ * @vadjustment: vertical scroll adjustment
+ *
+ * Sets the #GtkAdjustment for the vertical scrollbar.
+ */
+void
+gtk_scrolled_window_set_vadjustment (GtkScrolledWindow *scrolled_window,
+				     GtkAdjustment     *vadjustment)
+{
+  gtk_scrolled_window_set_vadjustment_impl (scrolled_window, vadjustment);
+}
+
+static GtkAdjustment*
+gtk_scrolled_window_get_hadjustment_ (GtkScrolledWindow *scrolled_window)
+{
+  g_return_val_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window), NULL);
+
+  return (scrolled_window->hscrollbar ?
+	  gtk_range_get_adjustment (GTK_RANGE (scrolled_window->hscrollbar)) :
+	  NULL);
+}
+
+/**
  * gtk_scrolled_window_get_hadjustment:
  * @scrolled_window: a #GtkScrolledWindow
  *
@@ -545,10 +734,16 @@
 GtkAdjustment*
 gtk_scrolled_window_get_hadjustment (GtkScrolledWindow *scrolled_window)
 {
+  return gtk_scrolled_window_get_hadjustment_impl (scrolled_window);
+}
+
+static GtkAdjustment*
+gtk_scrolled_window_get_vadjustment_ (GtkScrolledWindow *scrolled_window)
+{
   g_return_val_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window), NULL);
 
-  return (scrolled_window->hscrollbar ?
-	  gtk_range_get_adjustment (GTK_RANGE (scrolled_window->hscrollbar)) :
+  return (scrolled_window->vscrollbar ?
+	  gtk_range_get_adjustment (GTK_RANGE (scrolled_window->vscrollbar)) :
 	  NULL);
 }
 
@@ -564,11 +759,15 @@
 GtkAdjustment*
 gtk_scrolled_window_get_vadjustment (GtkScrolledWindow *scrolled_window)
 {
-  g_return_val_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window), NULL);
+  return gtk_scrolled_window_get_vadjustment_impl (scrolled_window);
+}
 
-  return (scrolled_window->vscrollbar ?
-	  gtk_range_get_adjustment (GTK_RANGE (scrolled_window->vscrollbar)) :
-	  NULL);
+static GtkWidget*
+gtk_scrolled_window_get_hscrollbar_ (GtkScrolledWindow *scrolled_window)
+{
+  g_return_val_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window), NULL);
+  
+  return scrolled_window->hscrollbar;
 }
 
 /**
@@ -585,9 +784,15 @@
 GtkWidget*
 gtk_scrolled_window_get_hscrollbar (GtkScrolledWindow *scrolled_window)
 {
+  return gtk_scrolled_window_get_hscrollbar_impl (scrolled_window);
+}
+
+static GtkWidget*
+gtk_scrolled_window_get_vscrollbar_ (GtkScrolledWindow *scrolled_window)
+{
   g_return_val_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window), NULL);
-  
-  return scrolled_window->hscrollbar;
+
+  return scrolled_window->vscrollbar;
 }
 
 /**
@@ -604,9 +809,31 @@
 GtkWidget*
 gtk_scrolled_window_get_vscrollbar (GtkScrolledWindow *scrolled_window)
 {
-  g_return_val_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window), NULL);
+  return gtk_scrolled_window_get_vscrollbar_impl (scrolled_window);
+}
 
-  return scrolled_window->vscrollbar;
+static void
+gtk_scrolled_window_set_policy_ (GtkScrolledWindow *scrolled_window,
+				 GtkPolicyType      hscrollbar_policy,
+				 GtkPolicyType      vscrollbar_policy)
+{
+  GObject *object = G_OBJECT (scrolled_window);
+  
+  g_return_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window));
+
+  if ((scrolled_window->hscrollbar_policy != hscrollbar_policy) ||
+      (scrolled_window->vscrollbar_policy != vscrollbar_policy))
+    {
+      scrolled_window->hscrollbar_policy = hscrollbar_policy;
+      scrolled_window->vscrollbar_policy = vscrollbar_policy;
+
+      gtk_widget_queue_resize (GTK_WIDGET (scrolled_window));
+
+      g_object_freeze_notify (object);
+      g_object_notify (object, "hscrollbar-policy");
+      g_object_notify (object, "vscrollbar-policy");
+      g_object_thaw_notify (object);
+    }
 }
 
 /**
@@ -629,23 +856,21 @@
 				GtkPolicyType      hscrollbar_policy,
 				GtkPolicyType      vscrollbar_policy)
 {
-  GObject *object = G_OBJECT (scrolled_window);
-  
-  g_return_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window));
-
-  if ((scrolled_window->hscrollbar_policy != hscrollbar_policy) ||
-      (scrolled_window->vscrollbar_policy != vscrollbar_policy))
-    {
-      scrolled_window->hscrollbar_policy = hscrollbar_policy;
-      scrolled_window->vscrollbar_policy = vscrollbar_policy;
+  gtk_scrolled_window_set_policy_impl (scrolled_window, hscrollbar_policy,
+                                       vscrollbar_policy);
+}
 
-      gtk_widget_queue_resize (GTK_WIDGET (scrolled_window));
+static void
+gtk_scrolled_window_get_policy_ (GtkScrolledWindow *scrolled_window,
+				 GtkPolicyType     *hscrollbar_policy,
+				 GtkPolicyType     *vscrollbar_policy)
+{
+  g_return_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window));
 
-      g_object_freeze_notify (object);
-      g_object_notify (object, "hscrollbar-policy");
-      g_object_notify (object, "vscrollbar-policy");
-      g_object_thaw_notify (object);
-    }
+  if (hscrollbar_policy)
+    *hscrollbar_policy = scrolled_window->hscrollbar_policy;
+  if (vscrollbar_policy)
+    *vscrollbar_policy = scrolled_window->vscrollbar_policy;
 }
 
 /**
@@ -664,12 +889,8 @@
 				GtkPolicyType     *hscrollbar_policy,
 				GtkPolicyType     *vscrollbar_policy)
 {
-  g_return_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window));
-
-  if (hscrollbar_policy)
-    *hscrollbar_policy = scrolled_window->hscrollbar_policy;
-  if (vscrollbar_policy)
-    *vscrollbar_policy = scrolled_window->vscrollbar_policy;
+  gtk_scrolled_window_get_policy_impl (scrolled_window, hscrollbar_policy,
+                                       vscrollbar_policy);
 }
 
 static void
@@ -723,6 +944,16 @@
     }
 }
 
+static void
+gtk_scrolled_window_set_placement_ (GtkScrolledWindow *scrolled_window,
+				    GtkCornerType      window_placement)
+{
+  g_return_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window));
+
+  gtk_scrolled_window_set_placement_set (scrolled_window, TRUE, FALSE);
+  gtk_scrolled_window_set_placement_internal (scrolled_window, window_placement);
+}
+
 /**
  * gtk_scrolled_window_set_placement:
  * @scrolled_window: a #GtkScrolledWindow
@@ -743,10 +974,15 @@
 gtk_scrolled_window_set_placement (GtkScrolledWindow *scrolled_window,
 				   GtkCornerType      window_placement)
 {
-  g_return_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window));
+  gtk_scrolled_window_set_placement_impl (scrolled_window, window_placement);
+}
 
-  gtk_scrolled_window_set_placement_set (scrolled_window, TRUE, FALSE);
-  gtk_scrolled_window_set_placement_internal (scrolled_window, window_placement);
+static GtkCornerType
+gtk_scrolled_window_get_placement_ (GtkScrolledWindow *scrolled_window)
+{
+  g_return_val_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window), GTK_CORNER_TOP_LEFT);
+
+  return scrolled_window->window_placement;
 }
 
 /**
@@ -764,9 +1000,24 @@
 GtkCornerType
 gtk_scrolled_window_get_placement (GtkScrolledWindow *scrolled_window)
 {
-  g_return_val_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window), GTK_CORNER_TOP_LEFT);
+  return gtk_scrolled_window_get_placement_impl (scrolled_window);
+}
 
-  return scrolled_window->window_placement;
+static void
+gtk_scrolled_window_unset_placement_ (GtkScrolledWindow *scrolled_window)
+{
+  GtkScrolledWindowPrivate *priv = GTK_SCROLLED_WINDOW_GET_PRIVATE (scrolled_window);
+
+  g_return_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window));
+
+  if (priv->window_placement_set)
+    {
+      priv->window_placement_set = FALSE;
+
+      gtk_widget_queue_resize (GTK_WIDGET (scrolled_window));
+
+      g_object_notify (G_OBJECT (scrolled_window), "window-placement-set");
+    }
 }
 
 /**
@@ -785,17 +1036,26 @@
 void
 gtk_scrolled_window_unset_placement (GtkScrolledWindow *scrolled_window)
 {
-  GtkScrolledWindowPrivate *priv = GTK_SCROLLED_WINDOW_GET_PRIVATE (scrolled_window);
+  gtk_scrolled_window_unset_placement_impl (scrolled_window);
+}
 
+static void
+gtk_scrolled_window_set_shadow_type_ (GtkScrolledWindow *scrolled_window,
+				      GtkShadowType      type)
+{
   g_return_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window));
-
-  if (priv->window_placement_set)
+  g_return_if_fail (type >= GTK_SHADOW_NONE && type <= GTK_SHADOW_ETCHED_OUT);
+  
+  if (scrolled_window->shadow_type != type)
     {
-      priv->window_placement_set = FALSE;
+      scrolled_window->shadow_type = type;
+
+      if (gtk_widget_is_drawable (GTK_WIDGET (scrolled_window)))
+	gtk_widget_queue_draw (GTK_WIDGET (scrolled_window));
 
       gtk_widget_queue_resize (GTK_WIDGET (scrolled_window));
 
-      g_object_notify (G_OBJECT (scrolled_window), "window-placement-set");
+      g_object_notify (G_OBJECT (scrolled_window), "shadow-type");
     }
 }
 
@@ -812,20 +1072,15 @@
 gtk_scrolled_window_set_shadow_type (GtkScrolledWindow *scrolled_window,
 				     GtkShadowType      type)
 {
-  g_return_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window));
-  g_return_if_fail (type >= GTK_SHADOW_NONE && type <= GTK_SHADOW_ETCHED_OUT);
-  
-  if (scrolled_window->shadow_type != type)
-    {
-      scrolled_window->shadow_type = type;
-
-      if (gtk_widget_is_drawable (GTK_WIDGET (scrolled_window)))
-	gtk_widget_queue_draw (GTK_WIDGET (scrolled_window));
+  gtk_scrolled_window_set_shadow_type_impl (scrolled_window, type);
+}
 
-      gtk_widget_queue_resize (GTK_WIDGET (scrolled_window));
+static GtkShadowType
+gtk_scrolled_window_get_shadow_type_ (GtkScrolledWindow *scrolled_window)
+{
+  g_return_val_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window), GTK_SHADOW_NONE);
 
-      g_object_notify (G_OBJECT (scrolled_window), "shadow-type");
-    }
+  return scrolled_window->shadow_type;
 }
 
 /**
@@ -840,9 +1095,7 @@
 GtkShadowType
 gtk_scrolled_window_get_shadow_type (GtkScrolledWindow *scrolled_window)
 {
-  g_return_val_if_fail (GTK_IS_SCROLLED_WINDOW (scrolled_window), GTK_SHADOW_NONE);
-
-  return scrolled_window->shadow_type;
+  return gtk_scrolled_window_get_shadow_type_impl (scrolled_window);
 }
 
 static void
@@ -1707,32 +1960,9 @@
   GTK_CONTAINER_CLASS (gtk_scrolled_window_parent_class)->remove (container, child);
 }
 
-/**
- * gtk_scrolled_window_add_with_viewport:
- * @scrolled_window: a #GtkScrolledWindow
- * @child: the widget you want to scroll
- *
- * Used to add children without native scrolling capabilities. This
- * is simply a convenience function; it is equivalent to adding the
- * unscrollable child to a viewport, then adding the viewport to the
- * scrolled window. If a child has native scrolling, use
- * gtk_container_add() instead of this function.
- *
- * The viewport scrolls the child by moving its #GdkWindow, and takes
- * the size of the child to be the size of its toplevel #GdkWindow. 
- * This will be very wrong for most widgets that support native scrolling;
- * for example, if you add a widget such as #GtkTreeView with a viewport,
- * the whole widget will scroll, including the column headings. Thus, 
- * widgets with native scrolling support should not be used with the 
- * #GtkViewport proxy.
- *
- * A widget supports scrolling natively if the 
- * set_scroll_adjustments_signal field in #GtkWidgetClass is non-zero,
- * i.e. has been filled in with a valid signal identifier.
- */
-void
-gtk_scrolled_window_add_with_viewport (GtkScrolledWindow *scrolled_window,
-				       GtkWidget         *child)
+static void
+gtk_scrolled_window_add_with_viewport_ (GtkScrolledWindow *scrolled_window,
+				        GtkWidget         *child)
 {
   GtkBin *bin;
   GtkWidget *viewport;
@@ -1762,17 +1992,38 @@
   gtk_container_add (GTK_CONTAINER (viewport), child);
 }
 
-/*
- * _gtk_scrolled_window_get_spacing:
- * @scrolled_window: a scrolled window
- * 
- * Gets the spacing between the scrolled window's scrollbars and
- * the scrolled widget. Used by GtkCombo
- * 
- * Return value: the spacing, in pixels.
+/**
+ * gtk_scrolled_window_add_with_viewport:
+ * @scrolled_window: a #GtkScrolledWindow
+ * @child: the widget you want to scroll
+ *
+ * Used to add children without native scrolling capabilities. This
+ * is simply a convenience function; it is equivalent to adding the
+ * unscrollable child to a viewport, then adding the viewport to the
+ * scrolled window. If a child has native scrolling, use
+ * gtk_container_add() instead of this function.
+ *
+ * The viewport scrolls the child by moving its #GdkWindow, and takes
+ * the size of the child to be the size of its toplevel #GdkWindow. 
+ * This will be very wrong for most widgets that support native scrolling;
+ * for example, if you add a widget such as #GtkTreeView with a viewport,
+ * the whole widget will scroll, including the column headings. Thus, 
+ * widgets with native scrolling support should not be used with the 
+ * #GtkViewport proxy.
+ *
+ * A widget supports scrolling natively if the 
+ * set_scroll_adjustments_signal field in #GtkWidgetClass is non-zero,
+ * i.e. has been filled in with a valid signal identifier.
  */
-gint
-_gtk_scrolled_window_get_scrollbar_spacing (GtkScrolledWindow *scrolled_window)
+void
+gtk_scrolled_window_add_with_viewport (GtkScrolledWindow *scrolled_window,
+				       GtkWidget         *child)
+{
+  gtk_scrolled_window_add_with_viewport_impl (scrolled_window, child);
+}
+
+static gint
+_gtk_scrolled_window_get_scrollbar_spacing_ (GtkScrolledWindow *scrolled_window)
 {
   GtkScrolledWindowClass *class;
     
@@ -1794,5 +2045,20 @@
     }
 }
 
+/*
+ * _gtk_scrolled_window_get_spacing:
+ * @scrolled_window: a scrolled window
+ * 
+ * Gets the spacing between the scrolled window's scrollbars and
+ * the scrolled widget. Used by GtkCombo
+ * 
+ * Return value: the spacing, in pixels.
+ */
+gint
+_gtk_scrolled_window_get_scrollbar_spacing (GtkScrolledWindow *scrolled_window)
+{
+  return _gtk_scrolled_window_get_scrollbar_spacing_impl (scrolled_window);
+}
+
 #define __GTK_SCROLLED_WINDOW_C__
 #include "gtkaliasdef.c"
